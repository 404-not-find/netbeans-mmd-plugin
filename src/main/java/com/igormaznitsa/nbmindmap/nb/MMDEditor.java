/*
 * Copyright 2015 Igor Maznitsa.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.igormaznitsa.nbmindmap.nb;

import com.igormaznitsa.nbmindmap.gui.MindMapListener;
import com.igormaznitsa.nbmindmap.gui.MindMapPanel;
import com.igormaznitsa.nbmindmap.gui.mmview.AbstractElement;
import com.igormaznitsa.nbmindmap.model.MindMap;
import com.igormaznitsa.nbmindmap.model.MindMapTopic;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.event.ChangeListener;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.cookies.EditorCookie;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_NBMMap_VISUAL",
        iconBase = "com/igormaznitsa/nbmindmap/icons/nbmm16.png",
        mimeType = "text/x-mmd+markdown",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "com.igormaznitsa.MMDEditor",
        position = 1
)
@Messages("LBL_NBMMap_VISUAL=Visual")
public final class MMDEditor extends JScrollPane implements MultiViewElement, UndoRedo, MindMapListener {

  private static final long serialVersionUID = 3782425854129291887L;

  private final MMDDataObject dataObject;
  private transient MultiViewElementCallback callback;
  private final EditorCookie editorCookie;
  private final MindMapPanel mindMapPanel;

  public MMDEditor(final Lookup lkp) throws IOException {
    this.dataObject = lkp.lookup(MMDDataObject.class);
    assert this.dataObject != null;

    this.editorCookie = lkp.lookup(EditorCookie.class);
    assert this.editorCookie != null;

    initComponents();

    this.mindMapPanel = new MindMapPanel();
    this.setViewportView(this.mindMapPanel);
    this.addComponentListener(new ComponentAdapter() {

      @Override
      public void componentResized(ComponentEvent e) {
        processEditorResizing(mindMapPanel);
      }

    });

    this.mindMapPanel.addMindMapListener(this);

    this.repaint();
  }

  private static void processEditorResizing(final MindMapPanel panel) {
    panel.endEdit(false);
    panel.revalidate();
    panel.repaint();
  }

  @Override
  public void onMindMapModelChanged(final MindMapPanel source) {
    updateDataInEditors();
  }

  @Override
  public void onMindMapModelRealigned(final MindMapPanel source, final Dimension coveredAreaSize) {
    this.getViewport().revalidate();
  }

  @Override
  public void onEnsureVisibilityOfTopic(final MindMapPanel source, final MindMapTopic topic) {
    moveVisibleRectToElement(this, source, topic == null ? null : (AbstractElement)topic.getPayload());
  }

  @Override
  public String getName() {
    return "MindMapMarkdownEditor";
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    mainToolBar = new javax.swing.JToolBar();

    mainToolBar.setRollover(true);
  }// </editor-fold>//GEN-END:initComponents

  private void updateDataInEditors() {
    final String text;
    if (this.mindMapPanel.getErrorText() == null) {
      try {
        final StringWriter writer = new StringWriter(16384);
        this.mindMapPanel.getModel().write(writer);
        text = writer.toString();
      }
      catch (IOException ex) {
        ex.printStackTrace();
        return;
      }

      if (this.editorCookie != null) {
        final JEditorPane[] editors = this.editorCookie.getOpenedPanes();
        if (editors != null && editors.length != 0) {
          for (final JEditorPane p : editors) {
            p.setText(text);
          }
        }
      }
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JToolBar mainToolBar;
  // End of variables declaration//GEN-END:variables
  @Override
  public JComponent getVisualRepresentation() {
    return this;
  }

  @Override
  public JComponent getToolbarRepresentation() {
    return this.mainToolBar;
  }

  @Override
  public Action[] getActions() {
    if (this.callback == null) {
      return new Action[0];
    }
    else {
      return this.callback.createDefaultActions();
    }
  }

  @Override
  public Lookup getLookup() {
    return Lookups.singleton(this);
  }

  @Override
  public void componentOpened() {
  }

  @Override
  public void componentClosed() {
  }

  @Override
  public void componentShowing() {
    MindMap map = null;
    try {
      map = new MindMap(new StringReader(this.dataObject.getPrimaryFile().asText("UTF-8")));
      this.mindMapPanel.setModel(map);
      this.mindMapPanel.setErrorText(null);
    }
    catch (IllegalArgumentException ex) {
      this.mindMapPanel.setErrorText("Can't find topics, may be wrong format");
    }
    catch (Exception ex) {
      ex.printStackTrace();
      this.mindMapPanel.setErrorText("Error during parsing");
    }

    revalidate();
    repaint();
  }

  private static void moveVisibleRectToElement(final JScrollPane pane, final MindMapPanel mmPanel, final AbstractElement e) {
    if (e != null) {
      final Rectangle componentRect = e.getBounds().getBounds();

      final Rectangle visibleRect = pane.getViewport().getViewRect();

      final int xoffset = (visibleRect.width - componentRect.width) / 2;
      final int yoffset = (visibleRect.height - componentRect.height) / 2;

      int px = Math.max(0, componentRect.x - xoffset);
      int py = Math.max(0, componentRect.y - yoffset);

      final Dimension preferredSize = mmPanel.getPreferredSize();
      pane.getViewport().setViewPosition(new Point(px,py));
    }
  }

  @Override
  public void componentHidden() {
  }

  @Override
  public void componentActivated() {

  }

  @Override
  public void componentDeactivated() {

  }

  @Override
  public void setMultiViewCallback(final MultiViewElementCallback callback) {
    this.callback = callback;
  }

  @Override
  public CloseOperationState canCloseElement() {
    return CloseOperationState.STATE_OK;
  }

  @Override
  public UndoRedo getUndoRedo() {
    return this;
  }

  @Override
  public boolean canUndo() {
    return false;
  }

  @Override
  public boolean canRedo() {
    return false;
  }

  @Override
  public void undo() throws CannotUndoException {
    throw new CannotUndoException();
  }

  @Override
  public void redo() throws CannotRedoException {
    throw new CannotUndoException();
  }

  @Override
  public void addChangeListener(ChangeListener l) {

  }

  @Override
  public void removeChangeListener(ChangeListener l) {

  }

  @Override
  public String getUndoPresentationName() {
    return "";
  }

  @Override
  public String getRedoPresentationName() {
    return "";
  }

  public static void main(String... args) throws Exception {
    final JFrame frame = new JFrame("Test");
    frame.setSize(500, 500);
    frame.setLocationRelativeTo(null);

    final JScrollPane panel = new JScrollPane();

    final MindMapPanel pp = new MindMapPanel();
    pp.addComponentListener(new ComponentAdapter() {

      @Override
      public void componentResized(ComponentEvent e) {
        MMDEditor.processEditorResizing(pp);
      }

    });

//    final MindMap map = new MindMap(new StringReader("some\n------\n# HelloWorld\n##rrr\n##rrr\n###GGG\n####HHH\n#####JJKKLL\n## leve1.1\n> leftSide=\"true\"\n## leve1.1\n> leftSide=\"true\"\n"));
//    final MindMap map = new MindMap(new StringReader("some\n------\n# HelloWorld\n## Some\n## Some\n## Some\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n### AAAA\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n## Some\n"));
    final MindMap map = new MindMap(new StringReader("some\n------\n# HelloWorld\n- LINK\n```http://www.color.com```\n- NOTE\n```Hello world note```\n## Some\n"));
    pp.setModel(map);

    pp.addMindMapListener(new MindMapListener() {

      @Override
      public void onEnsureVisibilityOfTopic(MindMapPanel source, MindMapTopic topic) {
        moveVisibleRectToElement(panel, source, (AbstractElement) topic.getPayload());
      }

      @Override
      public void onMindMapModelChanged(MindMapPanel source) {
      }

      @Override
      public void onMindMapModelRealigned(MindMapPanel source, Dimension coveredAreaSize) {
        panel.getViewport().revalidate();
      }

    });

    panel.setViewportView(pp);

    frame.setContentPane(panel);

    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setVisible(true);
  }

}
