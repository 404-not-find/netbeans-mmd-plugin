/*
 * Copyright 2015 Igor Maznitsa.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.igormaznitsa.nbmindmap.nb;

import com.igormaznitsa.nbmindmap.mmgui.Configuration;
import com.igormaznitsa.nbmindmap.mmgui.MindMapPanel;
import com.igormaznitsa.nbmindmap.utils.NbUtils;
import java.awt.Color;

final class MMDCfgPanel extends javax.swing.JPanel {

  private static final long serialVersionUID = -1090601330630026253L;

  private final MMDCfgOptionsPanelController controller;

  private volatile boolean changeNotificationAllowed = true;

  private static final Configuration etalon = new Configuration();
  
  MMDCfgPanel(final MMDCfgOptionsPanelController controller) {
    this.controller = controller;
    initComponents();
    // TODO listen to changes in form fields and call controller.changed()
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    checkBoxShowGrid = new javax.swing.JCheckBox();
    checkBoxDropShadow = new javax.swing.JCheckBox();
    colorChooserPaperColor = new com.igormaznitsa.nbmindmap.nb.ColorChoosingButton();
    colorChooserGridColor = new com.igormaznitsa.nbmindmap.nb.ColorChoosingButton();

    org.openide.awt.Mnemonics.setLocalizedText(checkBoxShowGrid, org.openide.util.NbBundle.getMessage(MMDCfgPanel.class, "MMDCfgPanel.checkBoxShowGrid.text")); // NOI18N
    checkBoxShowGrid.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkBoxShowGridActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(checkBoxDropShadow, org.openide.util.NbBundle.getMessage(MMDCfgPanel.class, "MMDCfgPanel.checkBoxDropShadow.text")); // NOI18N
    checkBoxDropShadow.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkBoxDropShadowActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(colorChooserPaperColor, org.openide.util.NbBundle.getMessage(MMDCfgPanel.class, "MMDCfgPanel.colorChooserPaperColor.text")); // NOI18N
    colorChooserPaperColor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    colorChooserPaperColor.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        colorChooserPaperColorActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(colorChooserGridColor, org.openide.util.NbBundle.getMessage(MMDCfgPanel.class, "MMDCfgPanel.colorChooserGridColor.text")); // NOI18N
    colorChooserGridColor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    colorChooserGridColor.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        colorChooserGridColorActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(checkBoxShowGrid)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(checkBoxDropShadow))
          .addComponent(colorChooserPaperColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(colorChooserGridColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(256, Short.MAX_VALUE))
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {colorChooserGridColor, colorChooserPaperColor});

    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(checkBoxShowGrid)
          .addComponent(checkBoxDropShadow))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(colorChooserPaperColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(colorChooserGridColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(241, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void checkBoxShowGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxShowGridActionPerformed
    if (changeNotificationAllowed) {
      this.controller.changed();
    }
  }//GEN-LAST:event_checkBoxShowGridActionPerformed

  private void checkBoxDropShadowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxDropShadowActionPerformed
    if (changeNotificationAllowed){
      this.controller.changed();
    }
  }//GEN-LAST:event_checkBoxDropShadowActionPerformed

  private void colorChooserPaperColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserPaperColorActionPerformed
    if (this.colorChooserPaperColor.isLastOkPressed() && changeNotificationAllowed){
      this.controller.changed();
    }
  }//GEN-LAST:event_colorChooserPaperColorActionPerformed

  private void colorChooserGridColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserGridColorActionPerformed
    if (this.colorChooserGridColor.isLastOkPressed() && changeNotificationAllowed) {
      this.controller.changed();
    }
  }//GEN-LAST:event_colorChooserGridColorActionPerformed

  void load() {
    changeNotificationAllowed = false;
    try {
      this.checkBoxShowGrid.setSelected(NbUtils.getPreferences().getBoolean("showGrid", etalon.isShowGrid()));
      this.checkBoxDropShadow.setSelected(NbUtils.getPreferences().getBoolean("dropShadow", etalon.isDropShadow()));
      this.colorChooserPaperColor.setValue(new Color(NbUtils.getPreferences().getInt("paperColor", etalon.getPaperColor().getRGB())));
      this.colorChooserGridColor.setValue(new Color(NbUtils.getPreferences().getInt("gridColor", etalon.getGridColor().getRGB())));
    }
    finally {
      changeNotificationAllowed = true;
    }
  }

  void store() {
    try {
      NbUtils.getPreferences().putBoolean("showGrid", this.checkBoxShowGrid.isSelected());
      NbUtils.getPreferences().putBoolean("dropShadow", this.checkBoxDropShadow.isSelected());
      NbUtils.getPreferences().putInt("paperColor", this.colorChooserPaperColor.getValue().getRGB());
      NbUtils.getPreferences().putInt("gridColor", this.colorChooserGridColor.getValue().getRGB());
    }
    finally {
      MindMapPanel.loadCommonConfig();
    }
  }

  boolean valid() {
    return true;
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox checkBoxDropShadow;
  private javax.swing.JCheckBox checkBoxShowGrid;
  private com.igormaznitsa.nbmindmap.nb.ColorChoosingButton colorChooserGridColor;
  private com.igormaznitsa.nbmindmap.nb.ColorChoosingButton colorChooserPaperColor;
  // End of variables declaration//GEN-END:variables
}
