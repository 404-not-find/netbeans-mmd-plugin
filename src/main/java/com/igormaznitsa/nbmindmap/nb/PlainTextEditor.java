/*
 * Copyright 2015 Igor Maznitsa.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.igormaznitsa.nbmindmap.nb;

import com.igormaznitsa.nbmindmap.utils.Logger;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.EditorKit;
import org.netbeans.editor.BaseDocument;
import org.netbeans.editor.Utilities;
import org.openide.text.CloneableEditorSupport;
import org.openide.text.NbDocument;

public class PlainTextEditor extends javax.swing.JPanel {

  private static final long serialVersionUID = 5847351391577028903L;

  private final BaseDocument doc;

  public PlainTextEditor(final String text) {
    initComponents();

    final JEditorPane editor = new JEditorPane();
    final EditorKit kit = CloneableEditorSupport.getEditorKit("text/plain");
    editor.setEditorKit(kit);

    this.doc = Utilities.getDocument(editor);

    try {
      this.doc.replace(0, 0, text, null);
    }
    catch (BadLocationException ex) {
      Logger.error("Can't set text", ex);
    }

    final Component compo;

    if (doc instanceof NbDocument.CustomEditor) {
      NbDocument.CustomEditor ce = (NbDocument.CustomEditor) doc;
      compo = ce.createEditor(editor);
    }
    else {
      compo = new JScrollPane(editor);
    }

    compo.setPreferredSize(new Dimension(512, 300));
    
    this.add(compo, BorderLayout.CENTER);
  }

  public String getText() {
    try {
      return this.doc.getText(0, this.doc.getLength());
    }
    catch (BadLocationException e) {
      Logger.error("Can't get text", e);
      return null;
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    editorPopup = new javax.swing.JPopupMenu();

    setLayout(new java.awt.BorderLayout());
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPopupMenu editorPopup;
  // End of variables declaration//GEN-END:variables
}
